---

- name: Integration test for AWS Step Function state machine module
  block:

    # ==== Setup ==================================================

    - name: Set connection information for all tasks
      set_fact:
        aws_connection_info: &aws_connection_info
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          security_token: "{{ security_token }}"
          region: "{{ aws_region }}"
      no_log: yes

    - name: Create IAM service role needed for Step Functions
      iam_role:
        name: "{{ step_functions_role_name }}"
        description: Role with permissions for AWS Step Functions actions.
        assume_role_policy_document: "{{ lookup('file', 'state_machines_iam_trust_policy.json') }}"
        state: present
        <<: *aws_connection_info
      register: step_functions_role

    - name: Pause a few seconds to ensure IAM role is available to next task
      pause:
        seconds: 10

    # ==== Tests ===================================================

    - name: Create a new state machine -- check_mode
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        definition: "{{ lookup('file','state_machine.json') }}"
        role_arn: "{{ step_functions_role.iam_role.arn }}"
        tags:
          project: helloWorld
        state: present
        <<: *aws_connection_info
      register: creation_check
      check_mode: yes

    - assert:
        that:
          - creation_check.changed == True
          - creation_check.output == 'State machine would be created.'

    - name: Create a new state machine
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        definition: "{{ lookup('file','state_machine.json') }}"
        role_arn: "{{ step_functions_role.iam_role.arn }}"
        tags:
          project: helloWorld
        state: present
        <<: *aws_connection_info
      register: creation_output

    - assert:
        that:
          - creation_output.changed == True

    - name: Pause a few seconds to ensure state machine role is available
      pause:
        seconds: 5

    - name: Idempotent rerun of same state function -- check_mode
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        definition: "{{ lookup('file','state_machine.json') }}"
        role_arn: "{{ step_functions_role.iam_role.arn }}"
        tags:
          project: helloWorld
        state: present
        <<: *aws_connection_info
      register: result
      check_mode: yes

    - assert:
        that:
          - result.changed == False
          - result.output == 'State is up-to-date.'

    - name: Idempotent rerun of same state function
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        definition: "{{ lookup('file','state_machine.json') }}"
        role_arn: "{{ step_functions_role.iam_role.arn }}"
        tags:
          project: helloWorld
        state: present
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed == False

    - name: Update an existing state machine -- check_mode
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        definition: "{{ lookup('file','alternative_state_machine.json') }}"
        role_arn: "{{ step_functions_role.iam_role.arn }}"
        tags:
          differentTag: different_tag
        state: present
        <<: *aws_connection_info
      register: update_check
      check_mode: yes

    - assert:
        that:
          - update_check.changed == True
          - "update_check.output == 'State machine would be updated: {{ creation_output.state_machine_arn }}'"

    - name: Update an existing state machine
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        definition: "{{ lookup('file','alternative_state_machine.json') }}"
        role_arn: "{{ step_functions_role.iam_role.arn }}"
        tags:
          differentTag: different_tag
        state: present
        <<: *aws_connection_info
      register: update_output

    - assert:
        that:
          - update_output.changed == True
          - update_output.state_machine_arn == creation_output.state_machine_arn

    - name: Remove state machine -- check_mode
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        state: absent
        <<: *aws_connection_info
      register: deletion_check
      check_mode: yes

    - assert:
        that:
          - deletion_check.changed == True
          - "deletion_check.output == 'State machine would be deleted: {{ creation_output.state_machine_arn }}'"

    - name: Remove state machine
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        state: absent
        <<: *aws_connection_info
      register: deletion_output

    - assert:
        that:
          - deletion_output.changed == True
          - deletion_output.state_machine_arn == creation_output.state_machine_arn

    - name: Non-existent state machine is absent
      aws_step_functions_state_machine:
        name: "non_existing_state_machine"
        state: absent
        <<: *aws_connection_info
      register: result

    - assert:
        that:
          - result.changed == False

  # ==== Cleanup ====================================================

  always:

    - name: Cleanup - delete state machine
      aws_step_functions_state_machine:
        name: "{{ state_machine_name }}"
        state: absent
        <<: *aws_connection_info
      ignore_errors: true

    - name: Cleanup - delete IAM role needed for Step Functions test
      iam_role:
        name: "{{ step_functions_role_name }}"
        state: absent
        <<: *aws_connection_info
      ignore_errors: true
